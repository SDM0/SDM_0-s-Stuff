[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# sdm_adding_card context
# regex also has Talisman compat
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''
[\t ]*function Card:add_to_deck[\s\S]*?
(?<indent>[\t ]*)if G\.GAME\.blind.*then G\.E_MANAGER:add_event\(Event\(\{ func = function\(\) G\.GAME\.blind:set_blind\(nil, true, nil\); return true end \}\)\) end\n'''
position = "after"
payload = """
if not from_debuff and G.jokers and #G.jokers.cards > 0 then
    for i = 1, #G.jokers.cards do
        G.jokers.cards[i]:calculate_joker({sdm_adding_card = true, card = self})
    end
end

"""
line_prepend = '$indent'

# No shop planets
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "elseif v.id == 'no_shop_jokers' then"
position = "before"
payload = """
elseif v.id == 'no_shop_planets' then
    self.GAME.planet_rate = 0
"""
match_indent = true

# Warehouse negative effect
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:can_sell_card(context)"
position = "after"
payload = """
    if (SMODS and next(SMODS.find_card("j_sdm_warehouse"))) and self.ability.name ~= "Warehouse" then
        return false
    end
"""
match_indent = true

# Modded Deck/Sleeve effect
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v.no_pool_flag and G.GAME.pool_flags[v.no_pool_flag] then add = nil end"
position = "before"
payload = '''
local curr_deck = (G.GAME.viewed_back and G.GAME.viewed_back.name) or (G.GAME.selected_back and G.GAME.selected_back.name) or "Red Deck"
local curr_sleeve = (CardSleeves and G.GAME.selected_sleeve) or "sleeve_casl_none"
if ((curr_deck == "b_sdm_modders" or curr_deck == "b_sdm_deck_of_stuff") or curr_sleeve == "sleeve_sdm_modders") and (not v.original_key or (v.class_prefix and v.class_prefix..'_'..v.original_key == v.key)) and v.set == "Joker" then add = nil end
if ((curr_deck == "b_sdm_modders" or curr_deck == "b_sdm_deck_of_stuff") and curr_sleeve == "sleeve_sdm_modders") and (not v.original_key or (v.class_prefix and v.class_prefix..'_'..v.original_key == v.key)) then add = nil end
'''
match_indent = true

# SDM_0's Deck and Sleeve effect (code from Ceres "Ceres Joker")
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "_pool[#_pool + 1] = v.key"
position = "before"
payload = '''
if curr_deck and (curr_deck == "b_sdm_0_s" or curr_deck == "b_deck_of_stuff") then
    if string.sub(v.key, 1, 6) == "j_sdm_" then
        for i = 1, 4 do
            _pool[#_pool + 1] = v.key
            _pool_size = _pool_size + 1
        end
    end
end
if (curr_sleeve and curr_sleeve == "sleeve_sdm_0_s") then
    if string.sub(v.key, 1, 6) == "j_sdm_" then
        for i = 1, (curr_deck and (curr_deck == "b_sdm_0_s" or curr_deck == "b_deck_of_stuff" and 5)) or 4 do
            _pool[#_pool + 1] = v.key
            _pool_size = _pool_size + 1
        end
    end
end
'''
match_indent = true

# Ouija Board secret poker hand list (code from Ortalab)
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''boot_timer('splash prep', 'end',1)'''
position = "after"
payload = '''
if (SMODS.Mods['sdm0sstuff'] or {}).can_load then
    for k, v in pairs(G.GAME.hands) do
        if v.visible == false then
            G.P_CENTERS['j_sdm_ouija_board'].config.extra.secret_poker_hands[#G.P_CENTERS['j_sdm_ouija_board'].config.extra.secret_poker_hands+1] = k
        end
    end
end
'''
match_indent = true

# "Patch" effect
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''function Card:set_debuff(should_debuff)'''
position = "after"
payload = '''
    if G.GAME and G.GAME.patch_disable then return end
'''
match_indent = true

# Prevent "Disabled" message with "Patch"
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('k_disabled_ex'),colour = G.C.FILTER, delay = 0.45})'''
position = "at"
payload = '''
if G.GAME and not G.GAME.patch_disable then
    card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('k_disabled_ex'),colour = G.C.FILTER, delay = 0.45})
end
'''
match_indent = true

# "Joker Voucher" special case evolution
[[patches]]
[patches.pattern]
target = '=[SMODS joker_evolution "functions.lua"]'
pattern = '''function Card:evolve_card()'''
position = "after"
payload = '''
    if self.config.center_key == "j_sdm_joker_voucher" then
        G.GAME.evolution_total = (G.GAME.evolution_total and G.GAME.evolution_total + 1) or 1
        if G.jokers and G.jokers.cards and #G.jokers.cards > 0 then
            for i = 1, #G.jokers.cards do
                G.jokers.cards[i]:calculate_joker({evolution = true})
            end
        end
        delay(0.2)
        self:set_ability(G.P_CENTERS["j_sdm_joker_voucher_voucher"], true)
        delay(0.1)
        return true
    end
'''
match_indent = true