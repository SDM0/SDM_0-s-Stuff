[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# sdm_adding_card context
# regex also has Talisman compat
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''
[\t ]*function Card:add_to_deck[\s\S]*?
(?<indent>[\t ]*)if G\.GAME\.blind.*then G\.E_MANAGER:add_event\(Event\(\{ func = function\(\) G\.GAME\.blind:set_blind\(nil, true, nil\); return true end \}\)\) end\n'''
position = "after"
payload = """
if not from_debuff and G.jokers and #G.jokers.cards > 0 then
    for i = 1, #G.jokers.cards do
        G.jokers.cards[i]:calculate_joker({sdm_adding_card = true, card = self})
    end
end

"""
line_prepend = '$indent'

# No shop planets
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "elseif v.id == 'no_shop_jokers' then"
position = "before"
payload = """
elseif v.id == 'no_shop_planets' then
    self.GAME.planet_rate = 0
"""
match_indent = true

# Warehouse negative effect
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:can_sell_card(context)"
position = "after"
payload = """
    if (SMODS and next(SMODS.find_card("j_sdm_warehouse"))) and self.ability.name ~= "Warehouse" then
        return false
    end
"""
match_indent = true

# Modded Deck/Sleeve effect
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v.yes_pool_flag and not G.GAME.pool_flags[v.yes_pool_flag] then add = nil end"
position = "after"
payload = '''
local curr_deck = (G.GAME.viewed_back and G.GAME.viewed_back.name) or (G.GAME.selected_back and G.GAME.selected_back.name) or "Red Deck"
local curr_sleeve = (CardSleeves and G.GAME.selected_sleeve) or "sleeve_casl_none"
if ((curr_deck == "b_sdm_modders" or curr_deck == "b_sdm_deck_of_stuff") or curr_sleeve == "sleeve_sdm_modders") and (not v.original_key or (v.class_prefix and v.class_prefix..'_'..v.original_key == v.key)) and v.set == "Joker"  then add = nil end
if ((curr_deck == "b_sdm_modders" or curr_deck == "b_sdm_deck_of_stuff") and curr_sleeve == "sleeve_sdm_modders") and (not v.original_key or (v.class_prefix and v.class_prefix..'_'..v.original_key == v.key)) then add = nil end
'''
match_indent = true

# SDM_0's Deck and Sleeve effect (code from Ceres "Ceres Joker")
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "_pool[#_pool + 1] = v.key"
position = "before"
payload = '''
if curr_deck and (curr_deck == "b_sdm_0_s" or curr_deck == "b_sdm_deck_of_stuff") then
    if string.sub(v.key, 1, 6) == "j_sdm_" then
        for i = 1, 4 do
            _pool[#_pool + 1] = v.key
            _pool_size = _pool_size + 1
        end
    end
end
if (curr_sleeve and curr_sleeve == "sleeve_sdm_0_s") then
    if string.sub(v.key, 1, 6) == "j_sdm_" then
        for i = 1, (curr_deck and (curr_deck == "b_sdm_0_s" or curr_deck == "b_sdm_deck_of_stuff" and 5)) or 4 do
            _pool[#_pool + 1] = v.key
            _pool_size = _pool_size + 1
        end
    end
end
'''
match_indent = true

# "Joker Voucher" special case evolution
[[patches]]
[patches.pattern]
target = '=[SMODS joker_evolution "functions.lua"]'
pattern = '''function Card:evolve_card()'''
position = "after"
payload = '''
    if self.config.center_key == "j_sdm_joker_voucher" then
        G.GAME.evolution_total = (G.GAME.evolution_total and G.GAME.evolution_total + 1) or 1
        if G.jokers and G.jokers.cards and #G.jokers.cards > 0 then
            for i = 1, #G.jokers.cards do
                G.jokers.cards[i]:calculate_joker({evolution = true})
            end
        end
        delay(0.2)
        self:set_ability(G.P_CENTERS["j_sdm_joker_voucher_voucher"], true)
        delay(0.1)
        return true
    end
'''
match_indent = true

# Fixed "Treasure Chest" cost
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.area and self.ability.couponed and (self.area == G.shop_jokers or self.area == G.shop_booster) then self.cost = 0 end'''
position = "after"
payload = '''
if self.config.center_key == "j_sdm_treasure_chest" then
    self.cost = 0
end
'''
match_indent = true

# Prevent "BUY AND USE" button on Bakery Goods in shop
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''return base_background'''
position = "before"
payload = '''
if card.area == G.shop_jokers and G.shop_jokers then
  if card.ability.consumeable and card.ability.set == "Bakery" then
    base_attach.children.buy_and_use = nil
  end
  base_attach.children.buy = G.UIDEF.card_focus_button{
    card = card, parent = base_attach, type = 'buy',
    func = 'can_buy', button = 'buy_from_shop', card_width = card_width, buy_and_use = buy_and_use
  }
end
'''
match_indent = true

# Prevent "USE" button on Bakery Goods in consumables
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if card.ability.consumeable then'''
position = "after"
payload = '''
if card.ability.set == "Bakery" then
    return {
      n=G.UIT.ROOT, config = {padding = 0, colour = G.C.CLEAR}, nodes={
        {n=G.UIT.C, config={padding = 0.15, align = 'cl'}, nodes={
          {n=G.UIT.R, config={align = 'cl'}, nodes={
            sell
          }},
        }},
    }}
end
'''
match_indent = true

# Force "SELECT" button on Bakery Goods in packs
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''function G.UIDEF.use_and_sell_buttons(card)'''
position = "after"
payload = '''
    if (card.area == G.pack_cards and G.pack_cards) and card.ability.consumeable then
        if G.STATE == G.STATES.SMODS_BOOSTER_OPENED and (SMODS.OPENED_BOOSTER and SMODS.OPENED_BOOSTER.config.center.kind == 'Bakery') then
            return {
                n=G.UIT.ROOT, config = {padding = 0, colour = G.C.CLEAR}, nodes={
                  {n=G.UIT.R, config={ref_table = card, r = 0.08, padding = 0.1, align = "bm", minw = 0.5*card.T.w - 0.15, maxw = 0.9*card.T.w - 0.15, minh = 0.3*card.T.h, hover = true, shadow = true, colour = G.C.UI.BACKGROUND_INACTIVE, one_press = true, button = 'use_card', func = 'can_pick_card'}, nodes={
                    {n=G.UIT.T, config={text = localize('b_select'),colour = G.C.UI.TEXT_LIGHT, scale = 0.45, shadow = true}}
                  }},
              }}
        end
    end
'''
match_indent = true

# Prevent copied "Bakery Goods" from receiving another buff
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "new_card.pinned = other.pinned"
position = "after"
payload = '''
new_card.sdm_copy = true
'''
match_indent = true

# Whormhole effect
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "amount = amount or 1"
position = "after"
payload = '''
if SMODS then
    local sdm_wormhole = SMODS.find_card("j_sdm_wormhole")
    for i = 1, #sdm_wormhole do
        sdm_wormhole[i]:juice_up()
    end
    if #sdm_wormhole > 0 then amount = amount * (2 ^ #sdm_wormhole) end
end
'''
match_indent = true

# Hide USE button and add SELECT button on Bakery Goods with controller
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "if (card.area == G.jokers and G.jokers or card.area == G.consumeables and G.consumeables) and G.STATE ~= G.STATES.TUTORIAL then --Add a sell button"
position = "before"
payload = '''
if (card.area == G.consumeables and G.consumeables) and card.ability.consumeable and card.ability.set == "Bakery" then
    base_attach.children.use = nil
end
if (card.area == G.pack_cards and G.pack_cards) and card.ability.consumeable and card.ability.set == "Bakery" then
    base_attach.children.use = G.UIDEF.card_focus_button{
        card = card, parent = base_attach, type = 'select',
        func = 'can_pick_card', button = 'select_card', card_width = card_width
    }
end
'''
match_indent = true

# Magic Hands effect
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''if or_more and (#curr >= num) or (#curr == num) then'''
position = "at"
payload = '''
if or_more and (#curr >= num) or (next(SMODS.find_card("j_sdm_magic_hands")) and num > 2 and #curr == num - 1) or (#curr == num) then
'''
match_indent = true

# Prevent reroll vouchers from showing up in Roguelike Deck/Sleeve
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if G.shop_vouchers and G.shop_vouchers.cards then"
position = "before"
payload = '''
    local curr_deck = (G.GAME.viewed_back and G.GAME.viewed_back.name) or (G.GAME.selected_back and G.GAME.selected_back.name) or "Red Deck"
    local curr_sleeve = (CardSleeves and G.GAME.selected_sleeve) or "sleeve_casl_none"
    if curr_deck and (curr_deck == "b_sdm_roguelike" or curr_deck == "b_sdm_deck_of_stuff") then
        if v.key == "v_reroll_surplus" or v.key == "v_reroll_glut" or v.key == "v_cry_rerollexchange" then
            include = false
        end
    end
    if (curr_sleeve and curr_sleeve == "sleeve_sdm_roguelike") then
        if v.key == "v_reroll_surplus" or v.key == "v_reroll_glut" or v.key == "v_cry_rerollexchange" then
            include = false
        end
    end
'''
match_indent = true

# Hide reroll button
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "local t = {n=G.UIT.ROOT, config = {align = 'cl', colour = G.C.CLEAR}, nodes={"
position = "before"
payload = '''
if G.GAME and G.GAME.modifiers and G.GAME.modifiers.sdm_no_reroll then
    local t = {n=G.UIT.ROOT, config = {align = 'cl', colour = G.C.CLEAR}, nodes={
        UIBox_dyn_container({
            {n=G.UIT.C, config={align = "cm", padding = 0.1, emboss = 0.05, r = 0.1, colour = G.C.DYN_UI.BOSS_MAIN}, nodes={
                {n=G.UIT.R, config={align = "cm", padding = 0.05}, nodes={
                {n=G.UIT.C, config={align = "cm", padding = 0.1}, nodes={
                    {n=G.UIT.R,config={id = 'next_round_button', align = "cm", minw = 2.8, minh = 1.5, r=0.15,colour = G.C.RED, one_press = true, button = 'toggle_shop', hover = true,shadow = true}, nodes = {
                    {n=G.UIT.R, config={align = "cm", padding = 0.07, focus_args = {button = 'y', orientation = 'cr'}, func = 'set_button_pip'}, nodes={
                        {n=G.UIT.R, config={align = "cm", maxw = 1.3}, nodes={
                        {n=G.UIT.T, config={text = localize('b_next_round_1'), scale = 0.4, colour = G.C.WHITE, shadow = true}}
                        }},
                        {n=G.UIT.R, config={align = "cm", maxw = 1.3}, nodes={
                        {n=G.UIT.T, config={text = localize('b_next_round_2'), scale = 0.4, colour = G.C.WHITE, shadow = true}}
                        }}
                    }},
                    }},
                }},
                {n=G.UIT.C, config={align = "cm", padding = 0.2, r=0.2, colour = G.C.L_BLACK, emboss = 0.05, minw = 8.2}, nodes={
                    {n=G.UIT.O, config={object = G.shop_jokers}},
                }},
                }},
                {n=G.UIT.R, config={align = "cm", minh = 0.2}, nodes={}},
                {n=G.UIT.R, config={align = "cm", padding = 0.1}, nodes={
                {n=G.UIT.C, config={align = "cm", padding = 0.15, r=0.2, colour = G.C.L_BLACK, emboss = 0.05}, nodes={
                    {n=G.UIT.C, config={align = "cm", padding = 0.2, r=0.2, colour = G.C.BLACK, maxh = G.shop_vouchers.T.h+0.4}, nodes={
                    {n=G.UIT.T, config={text = localize{type = 'variable', key = 'ante_x_voucher', vars = {G.GAME.round_resets.ante}}, scale = 0.45, colour = G.C.L_BLACK, vert = true}},
                    {n=G.UIT.O, config={object = G.shop_vouchers}},
                    }},
                }},
                {n=G.UIT.C, config={align = "cm", padding = 0.15, r=0.2, colour = G.C.L_BLACK, emboss = 0.05}, nodes={
                    {n=G.UIT.O, config={object = G.shop_booster}},
                }},
                }}
            }
        },
    }, false)}}
    return t
end
'''
match_indent = true

# Ditto reset
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif context.setting_blind and not self.getting_sliced then"
position = "after"
payload = '''
if self.ability and self.ability.sdm_is_ditto then
    G.E_MANAGER:add_event(Event({
        func = function()
            self:juice_up(0.3, 0.5)
            self:set_ability(G.P_CENTERS["j_sdm_ditto_joker"], true)
            self.ability.sdm_is_ditto = nil
            return true
        end
    }))
    local valid_jokers = {}
    if G.jokers and G.jokers.cards and #G.jokers.cards > 1 then
        for i = 1, #G.jokers.cards do
            if not G.jokers.cards[i].debuff and G.jokers.cards[i] ~= self and G.jokers.cards[i].config.center.key ~= "j_sdm_ditto_joker" then
                valid_jokers[#valid_jokers+1] = G.jokers.cards[i]
            end
        end
    end
    if #valid_jokers > 0 then
        local old_card = self
        local chosen_joker = pseudorandom_element(valid_jokers, pseudoseed('ditto'))
        delay(1)
        G.E_MANAGER:add_event(Event({
            func = function()
                self:set_ability(G.P_CENTERS[chosen_joker.config.center.key], true)
                self:set_cost()
                for k, v in pairs(chosen_joker.ability) do
                    if type(v) == 'table' then
                        self.ability[k] = copy_table(v)
                    else
                        self.ability[k] = v
                    end
                end
                self.ability.fusion = nil -- FusionJokers compat to remove fuse button
                self.ability.sdm_is_ditto = true
                return true
            end
        }))
        card_eval_status_text(old_card, 'extra', nil, nil, nil, {
            message = localize('k_ditto_ex'),
            colour = HEX('f06bf2'),
        })
    end
end
'''
match_indent = true

# Ditto tooltip when transformed
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if _c.set == 'Other' then"
position = "before"
payload = '''
if _c.set == "Joker" and card and card.config.center.key ~= "j_sdm_ditto_joker" and card.ability and card.ability.sdm_is_ditto then info_queue[#info_queue+1] = G.P_CENTERS.j_sdm_ditto_joker end
'''
match_indent = true

# Prevent Ditto from evolving
[[patches]]
[patches.pattern]
target = '=[SMODS joker_evolution "functions.lua"]'
pattern = "function get_card_evolution(card)"
position = "after"
payload = '''
    if card.ability and card.ability.sdm_is_ditto then return false end
'''
match_indent = true

# Cryptid "Good Riddance" achievement
[[patches]]
[patches.pattern]
target = '=[SMODS Cryptid "items/code.lua"]'
pattern = "G.GAME.cry_banished_keys[c.config.center.key] = true"
position = "after"
payload = '''
    if c.config.center.key == "j_cry_blurred" then
		check_for_unlock({type = "good_riddance"})
	end
'''
match_indent = true

# "Drought" voucher line effect
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = "v.current_weight = v.get_weight and v:get_weight() or v.weight or 1"
position = "before"
payload = '''
if G.GAME and G.GAME.used_vouchers.v_sdm_drought then
    if v.kind == "Standard" then G.GAME.banned_keys[v.key] = true end
end
if G.GAME and G.GAME.used_vouchers.v_sdm_famine then
    if v.kind == "Buffoon" then G.GAME.banned_keys[v.key] = true end
end
'''
match_indent = true
